name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: true
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ (github.head_ref && github.ref) || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  # Build OpenHands App Image using native compilation
  build-app:
    name: Build OpenHands App Image
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform='${{ matrix.platform }}'
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Lowercase Repository Owner
        run: |
          echo REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./containers/app/Dockerfile
          # Only tag by registry + image name to push by digest
          tags: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=app-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=app-${{ env.PLATFORM_PAIR }}
          build-args: |
            OPENHANDS_BUILD_VERSION=${{ github.ref_name }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-app-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Build Runtime Images using native compilation
  build-runtime:
    name: Build Runtime Images
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
            base_image_name: nikolaik
            base_image: nikolaik/python-nodejs:python3.12-nodejs22
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            base_image_name: nikolaik
            base_image: nikolaik/python-nodejs:python3.12-nodejs22
          - platform: linux/amd64
            runner: ubuntu-24.04
            base_image_name: ubuntu
            base_image: ubuntu:24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            base_image_name: ubuntu
            base_image: ubuntu:24.04
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform='${{ matrix.platform }}'
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Lowercase Repository Owner
        run: |
          echo REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: pipx install poetry

      - name: Install Python dependencies
        run: make install-python-dependencies POETRY_GROUP=main INSTALL_PLAYWRIGHT=0

      - name: Generate runtime build context
        run: |
          mkdir -p containers/runtime
          poetry run python3 openhands/runtime/utils/runtime_build.py \
            --base_image ${{ matrix.base_image }} \
            --build_folder containers/runtime \
            --force_rebuild

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./containers/runtime
          # Only tag by registry + image name to push by digest
          tags: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=gha,scope=runtime-${{ matrix.base_image_name }}-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,mode=max,scope=runtime-${{ matrix.base_image_name }}-${{ env.PLATFORM_PAIR }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}-${{ matrix.base_image_name }}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-runtime-${{ matrix.base_image_name }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Merge multi-architecture manifests for App image
  merge-app:
    name: Merge App Image Manifests
    runs-on: ubuntu-24.04
    needs: [build-app]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-app-*
          merge-multiple: true

      - name: Lowercase Repository Owner
        run: |
          echo REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-app:${{ steps.meta.outputs.version }}

  # Merge multi-architecture manifests for Runtime images
  merge-runtime:
    name: Merge Runtime Image Manifests
    runs-on: ubuntu-24.04
    needs: [build-runtime]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        base_image_name: [nikolaik, ubuntu]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-runtime-${{ matrix.base_image_name }}-*
          merge-multiple: true

      - name: Lowercase Repository Owner
        run: |
          echo REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.base_image_name }}
            type=ref,event=pr,suffix=-${{ matrix.base_image_name }}
            type=semver,pattern={{version}},suffix=-${{ matrix.base_image_name }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.base_image_name }}
            type=semver,pattern={{major}},suffix=-${{ matrix.base_image_name }}
            type=raw,value=latest-${{ matrix.base_image_name }},enable={{is_default_branch}}
            type=sha,suffix=-${{ matrix.base_image_name }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(for f in *${{ matrix.base_image_name }}; do printf '${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime@sha256:%s ' "${f%-${{ matrix.base_image_name }}}"; done)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/openhands-runtime:${{ steps.meta.outputs.version }}
